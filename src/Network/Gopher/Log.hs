{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE OverloadedStrings #-}
module Network.Gopher.Log
  (
  -- * Logging Mechanism
    LogMessage (..)
  , GopherLogConfig (..)
  , defaultLogConfig
  -- ** Log handlers
  , defaultLogHandler
  , privacyLogHandler
  , filterMessageLevel
  , LogLevel (..)
  , logLevel
  -- * Re-Exports from 'System.Log.FastLogger'
  , ToLogStr (..)
  , LogStr ()
  ) where

import Control.Exception (IOException ())
import Data.ByteString.Builder (word16HexFixed, charUtf8, intDec)
import System.Socket.Family.Inet6
import System.Log.FastLogger (ToLogStr (..), LogStr)

-- | Sum type of all log messages generated by 'Network.Gopher.runGopher'
--   variants.
--   Note that this type might expand in the future, so be sure to
--   handle a default case in 'glcLogHandler'.
data LogMessage
  -- | An error occured while calling setuid/setgid to drop privileges
  --   by changing to the given user.
  = LogErrorCantChangeUid String
  -- | An error occured while initially accepting a new connection.
  | LogErrorAccept IOException
  -- | An error occured in handling a client connection
  --   that has been closed as a result.
  | LogErrorClosedConnection (SocketAddress Inet6) IOException
  -- | Privileges have been dropped successfully by changing to
  --   the user given.
  | LogInfoChangedUser String
  -- | Now listening on the given address.
  | LogInfoListeningOn (SocketAddress Inet6)
  -- | Accepted connection from the given address.
  | LogInfoNewConnection (SocketAddress Inet6)
  -- | Connection to the given address has been closed successfully.
  | LogInfoClosedConnection (SocketAddress Inet6)
  -- | Received given request from a given address.
  | LogInfoRequest String (SocketAddress Inet6)

data LogLevel = LogLevelInfo | LogLevelError
  deriving (Show, Eq, Ord)

logLevelBelow :: LogLevel -> LogLevel -> Bool
logLevelBelow _             LogLevelInfo  = True
logLevelBelow LogLevelError LogLevelError = True
logLevelBelow LogLevelInfo  LogLevelError = False

logLevel :: LogMessage -> LogLevel
logLevel m =
  case m of
    LogErrorCantChangeUid _ -> LogLevelError
    LogErrorAccept _ -> LogLevelError
    LogErrorClosedConnection _ _ -> LogLevelError
    LogInfoChangedUser _ -> LogLevelInfo
    LogInfoListeningOn _ -> LogLevelInfo
    LogInfoNewConnection _ -> LogLevelInfo
    LogInfoClosedConnection _ -> LogLevelInfo
    LogInfoRequest _ _ -> LogLevelInfo

-- | Filter log messages based on 'LogLevel'. All messages
--   below the given 'LogLevel' are returned as 'Just',
--   everything else yields 'Nothing'.
--
--   Together with the 'Maybe' monad this can be used to
--   make custom handlers:
--
--   @
--   myHandler m = filterMessageLevel LogLevelError m >>= privacyHandler
--   @
filterMessageLevel :: LogLevel -> LogMessage -> Maybe LogMessage
filterMessageLevel lvl msg =
  if logLevel msg `logLevelBelow` lvl
    then Just msg
    else Nothing

instance ToLogStr (SocketAddress Inet6) where
  -- TODO shorten address if possible
  toLogStr (SocketAddressInet6 addr port _ _) =
    let (b1, b2, b3, b4, b5, b6, b7, b8) = inet6AddressToTuple addr
      in toLogStr $
        charUtf8 '[' <>
        word16HexFixed b1 <> charUtf8 ':' <>
        word16HexFixed b2 <> charUtf8 ':' <>
        word16HexFixed b3 <> charUtf8 ':' <>
        word16HexFixed b4 <> charUtf8 ':' <>
        word16HexFixed b5 <> charUtf8 ':' <>
        word16HexFixed b6 <> charUtf8 ':' <>
        word16HexFixed b7 <> charUtf8 ':' <>
        word16HexFixed b8 <> charUtf8 ']' <>
        charUtf8 ':' <> intDec (fromIntegral port)

instance ToLogStr LogMessage where
  toLogStr msg =
    case msg of
      LogErrorCantChangeUid u -> "[err ] Can't change to user " <> toLogStr u
      LogErrorAccept e -> "[err ] Error while accepting a new connection: " <> toLogStr (show e)
      LogErrorClosedConnection a e -> "[err ] Closed connection to " <> toLogStr a <> " with error: " <> toLogStr (show e)
      LogInfoChangedUser u -> "[info] Changed to user " <> toLogStr u
      LogInfoListeningOn a -> "[info] Listening on " <> toLogStr a
      LogInfoNewConnection a -> "[info] New connection from " <> toLogStr a
      LogInfoClosedConnection a -> "[info] Closed connection to " <> toLogStr a
      LogInfoRequest r a -> "[info] Request \"" <> toLogStr r <> "\" from " <> toLogStr a

-- | Configures logging behavior of 'Network.Gopher.runGopher' variants.
data GopherLogConfig
  = GopherLogConfig
    { glcLogHandler :: LogMessage -> Maybe LogStr -- ^ Function that formats and filters 'LogMessage's. If it
                                                  --   returns 'Nothing' the message won't be logged. If it is
                                                  --   'Just' the returned 'LogStr' will be logged (prefixed
                                                  --   with the current time if necessary). This string should
                                                  --   not contain newlines.
                                                  --
                                                  --   Note that 'LogMessage' has a 'ToLogStr' instance so you
                                                  --   can use 'glcLogHandler' to just filter the 'LogMessage's
                                                  --   and delegate formatting to the default mechanism.
    , glcLogTimed   :: Bool                       -- ^ Wether log lines should be tagged with the current time
    }

defaultLogConfig :: GopherLogConfig
defaultLogConfig = GopherLogConfig defaultLogHandler True

-- | Default log handler used for 'glcLogHandler'
defaultLogHandler :: LogMessage -> Maybe LogStr
defaultLogHandler = fmap Just toLogStr

-- | Handler for 'glcLogHandler' which doesn't output any user
--   related data, i. e. IP addresses.
privacyLogHandler :: LogMessage -> Maybe LogStr
privacyLogHandler (LogErrorClosedConnection _ e) =
  Just $ "[err ] Closing connection with error: " <> toLogStr (show e)
privacyLogHandler (LogInfoRequest r _) =
  Just $ "[info] Received Request \"" <> toLogStr r <> "\""
privacyLogHandler (LogInfoNewConnection _) = Nothing
privacyLogHandler (LogInfoClosedConnection _) = Nothing
privacyLogHandler m = Just $ toLogStr m
